{"mappings":"AEgSA,IAAA,EAzRA,MAeE,YAAY,CAAY,CAAE,CACxB,IAAI,CAAC,YAAY,CAAG,GAAgB,CAClC,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,KAAK,IACrD,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,UAAW,CAET,IAAM,EAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,KAAK,IAc9C,IAAK,IAAM,KAAO,IAAI,CAAC,KAAK,CAAE,CAE5B,IAAM,EAAS,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAGpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EAEb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,IAKzB,KAAO,EAAO,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EACzC,EAAO,IAAI,CAAC,GAEd,EAAI,MAAM,CAAC,EAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,IAAK,EACzC,CAEI,CAAC,AAjCL,SAAuB,CAAM,CAAE,CAAM,EACnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IACjC,IAAK,IAAI,EAAI,EAAG,EAAI,CAAM,CAAC,EAAE,CAAC,MAAM,CAAE,IACpC,GAAI,CAAM,CAAC,EAAE,CAAC,EAAE,GAAK,CAAM,CAAC,EAAE,CAAC,EAAE,CAC/B,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EAuBmB,EAAM,IAAI,CAAC,KAAK,GACjC,IAAI,CAAC,aAAa,GAEpB,IAAI,CAAC,eAAe,EACtB,CAEA,WAAY,CACV,IAAK,IAAM,KAAO,IAAI,CAAC,KAAK,CAC1B,EAAI,OAAO,GAKb,IAAK,IAAM,KAFX,IAAI,CAAC,QAAQ,GAEK,IAAI,CAAC,KAAK,EAC1B,EAAI,OAAO,GAEb,IAAI,CAAC,eAAe,EACtB,CAEA,QAAS,CACP,IAAM,EAAU,EAAE,CAElB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACnC,CAAO,CAAC,EAAE,EACb,CAAA,CAAO,CAAC,EAAE,CAAG,EAAE,AAAF,EAEf,CAAO,CAAC,EAAE,CAAC,EAAE,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAKpC,IAAM,EAAO,EAAQ,GAAG,CAAC,AAAC,GAAQ,EAAI,KAAK,IAc3C,IAAK,IAAM,KAAO,EAAS,CAEzB,IAAM,EAAS,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAGpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EAEb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,IAKzB,KAAO,EAAO,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EACzC,EAAO,IAAI,CAAC,GAEd,EAAI,MAAM,CAAC,EAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,IAAK,EACzC,CAEA,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACxC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAO,CAAC,EAAE,CAAC,EAAE,AAIhC,EAAC,AAvCL,SAAuB,CAAM,CAAE,CAAM,EACnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IACjC,IAAK,IAAI,EAAI,EAAG,EAAI,CAAM,CAAC,EAAE,CAAC,MAAM,CAAE,IACpC,GAAI,CAAM,CAAC,EAAE,CAAC,EAAE,GAAK,CAAM,CAAC,EAAE,CAAC,EAAE,CAC/B,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,EA6BmB,EAAM,IACvB,IAAI,CAAC,aAAa,GAEpB,IAAI,CAAC,eAAe,EACtB,CAEA,UAAW,CAET,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IAAK,CAC7C,IAAM,EAAM,EAAE,CAEd,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,EAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAG3B,EAAI,OAAO,GAEX,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,AAE7B,CAEA,IAAI,CAAC,MAAM,GAGX,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IAAK,CAC7C,IAAM,EAAM,EAAE,CAEd,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,EAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAE3B,EAAI,OAAO,GAEX,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,AAE7B,CAEA,IAAI,CAAC,eAAe,EACtB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAYA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAMA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,KAAK,IACrD,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,CAIA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,KAAK,IACrD,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,CAGA,eAAgB,CACd,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAE,IACf,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,EAAW,IAAI,CAAC,IAAM,KAAK,MAAM,GAAK,IAEtC,GAAM,CAAC,EAAG,EAAE,CAAG,CAAU,CAAC,EAAE,AAE5B,CAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC/C,CAEA,iBAAkB,CAGhB,GAFgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,OAEzC,CACX,IAAI,CAAC,MAAM,CAAG,MAEd,MACF,CAIA,IAFa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,KAMnD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAC1B,EAAQ,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAC5B,EAAO,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,EAAE,CAAC,EAAE,CAEnC,GAAI,IAAY,GAAS,IAAY,EACnC,MAEJ,CAGF,IAAI,CAAC,MAAM,CAAG,OAChB,CACF,ED1RA,MAAM,EAAW,SAAS,aAAa,CAAC,iBAClC,EAAU,SAAS,aAAa,CAAC,eACjC,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAe,SAAS,gBAAgB,CAAC,aAEzC,EAAO,IAAI,EAEjB,SAAS,IACP,IAAM,EAAa,EAAK,SAAS,GAEjC,SACG,aAAa,CAAC,gBACd,SAAS,CAAC,MAAM,CAAC,SAAU,AAAe,QAAf,GAE9B,SACG,aAAa,CAAC,iBACd,SAAS,CAAC,MAAM,CAAC,SAAU,AAAe,SAAf,EAChC,CAEA,SAAS,IACP,EAAQ,WAAW,CAAG,EAAK,QAAQ,GAEnC,IAAM,EAAQ,EAAK,QAAQ,GAE3B,EAAM,OAAO,CAAC,CAAC,EAAM,KACnB,IAAM,EAAQ,CAAK,CAAC,KAAK,KAAK,CAAC,EAAQ,GAAG,CAAC,EAAQ,EAAE,AAErD,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,aAEb,GACF,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAM,CAAC,CAE7C,GAEA,EAAS,WAAW,CAAG,UAEvB,SAAS,aAAa,CAAC,kBAAkB,SAAS,CAAC,GAAG,CAAC,UACvD,SAAS,aAAa,CAAC,gBAAgB,SAAS,CAAC,GAAG,CAAC,UACrD,SAAS,aAAa,CAAC,iBAAiB,SAAS,CAAC,GAAG,CAAC,SACxD,CAEA,EAAS,gBAAgB,CAAC,QAAS,KACjC,EAAS,SAAS,CAAC,GAAG,CAAC,WAEnB,AAAqB,SAArB,EAAK,SAAS,GAChB,EAAK,KAAK,GAEV,EAAK,OAAO,GAGd,GACF,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,AAAqB,YAArB,EAAK,SAAS,GAChB,OAUF,IAAM,EAAO,AAPE,CACb,UAAW,WACX,WAAY,YACZ,QAAS,SACT,UAAW,UACb,CAEmB,CAAC,EAAE,GAAG,CAAC,CAEtB,IACF,CAAI,CAAC,EAAK,GACV,IACA,IAEJ,GAEA,EAAa,OAAO,CAAC,AAAC,IACpB,EAAI,gBAAgB,CAAC,QAAS,KAC5B,GAAI,AAAqB,YAArB,EAAK,SAAS,GAChB,OAGF,IAAM,EAAO,EAAI,OAAO,CAAC,IAAI,CAEzB,IACF,CAAI,CAAC,EAAK,GACV,IACA,IAEJ,EACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.state = this.initialState.map((row)=>row.slice());\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        // progress check\n        const copy = this.state.map((row)=>row.slice());\n        function compareStates(state1, state2) {\n            for(let i = 0; i < state1.length; i++)for(let j = 0; j < state1[i].length; j++){\n                if (state1[i][j] !== state2[i][j]) return false;\n            }\n            return true;\n        }\n        for (const row of this.state){\n            // Remove zeros from the row\n            const newRow = row.filter((tile)=>tile !== 0);\n            // Combine tiles\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i + 1, 1);\n            }\n            // Fill the rest of the row with zeros\n            while(newRow.length < this.state[0].length)newRow.push(0);\n            row.splice(0, this.state[0].length, ...newRow);\n        }\n        if (!compareStates(copy, this.state)) this.addRandomTile();\n        this.checkGameStatus();\n    }\n    moveRight() {\n        for (const row of this.state)row.reverse();\n        this.moveLeft();\n        for (const row of this.state)row.reverse();\n        this.checkGameStatus();\n    }\n    moveUp() {\n        const columns = [];\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (!columns[j]) columns[j] = [];\n            columns[j][i] = this.state[i][j];\n        }\n        // progress check\n        const copy = columns.map((row)=>row.slice());\n        function compareStates(state1, state2) {\n            for(let i = 0; i < state1.length; i++)for(let j = 0; j < state1[i].length; j++){\n                if (state1[i][j] !== state2[i][j]) return false;\n            }\n            return true;\n        }\n        for (const row of columns){\n            // Remove zeros from the row\n            const newRow = row.filter((tile)=>tile !== 0);\n            // Combine tiles\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i + 1, 1);\n            }\n            // Fill the rest of the row with zeros\n            while(newRow.length < this.state[0].length)newRow.push(0);\n            row.splice(0, this.state[0].length, ...newRow);\n        }\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++)this.state[i][j] = columns[j][i];\n        if (!compareStates(copy, columns)) this.addRandomTile();\n        this.checkGameStatus();\n    }\n    moveDown() {\n        // Transpor e inverter colunas\n        for(let j = 0; j < this.state[0].length; j++){\n            const col = [];\n            for(let i = 0; i < this.state.length; i++)col.push(this.state[i][j]);\n            col.reverse();\n            for(let i = 0; i < this.state.length; i++)this.state[i][j] = col[i];\n        }\n        this.moveUp();\n        // Reverter colunas novamente\n        for(let j = 0; j < this.state[0].length; j++){\n            const col = [];\n            for(let i = 0; i < this.state.length; i++)col.push(this.state[i][j]);\n            col.reverse();\n            for(let i = 0; i < this.state.length; i++)this.state[i][j] = col[i];\n        }\n        this.checkGameStatus();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.state = this.initialState.map((row)=>row.slice());\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"playing\";\n        this.score = 0;\n        this.state = this.initialState.map((row)=>row.slice());\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    // Add your own methods here\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        emptyCells.sort(()=>Math.random() - 0.5);\n        const [x, y] = emptyCells[0];\n        this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n    checkGameStatus() {\n        const has2048 = this.state.some((row)=>row.includes(2048));\n        if (has2048) {\n            this.status = \"win\";\n            return;\n        }\n        const has0 = this.state.some((row)=>row.includes(0));\n        if (has0) return;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const current = this.state[i][j];\n            const right = this.state[i][j + 1];\n            const down = this.state[i + 1]?.[j];\n            if (current === right || current === down) return;\n        }\n        this.status = \"lose\";\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$scoreEl = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$touchButtons = document.querySelectorAll(\".btn-move\");\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nfunction $09e991522ca7e64e$var$updateMessages() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    document.querySelector(\".message-win\").classList.toggle(\"hidden\", gameStatus !== \"win\");\n    document.querySelector(\".message-lose\").classList.toggle(\"hidden\", gameStatus !== \"lose\");\n}\nfunction $09e991522ca7e64e$var$render() {\n    $09e991522ca7e64e$var$scoreEl.textContent = $09e991522ca7e64e$var$game.getScore();\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$cells.forEach((cell, index)=>{\n        const value = state[Math.floor(index / 4)][index % 4];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell\";\n        if (value) cell.classList.add(`field-cell--${value}`);\n    });\n    $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$render();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const keyMap = {\n        ArrowLeft: \"moveLeft\",\n        ArrowRight: \"moveRight\",\n        ArrowUp: \"moveUp\",\n        ArrowDown: \"moveDown\"\n    };\n    const move = keyMap[e.key];\n    if (move) {\n        $09e991522ca7e64e$var$game[move]();\n        $09e991522ca7e64e$var$render();\n        $09e991522ca7e64e$var$updateMessages();\n    }\n});\n$09e991522ca7e64e$var$touchButtons.forEach((btn)=>{\n    btn.addEventListener(\"click\", ()=>{\n        if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n        const move = btn.dataset.move;\n        if (move) {\n            $09e991522ca7e64e$var$game[move]();\n            $09e991522ca7e64e$var$render();\n            $09e991522ca7e64e$var$updateMessages();\n        }\n    });\n});\n\n\n//# sourceMappingURL=index.1206d459.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst startBtn = document.querySelector('.button.start');\nconst scoreEl = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst touchButtons = document.querySelectorAll('.btn-move');\n\nconst game = new Game();\n\nfunction updateMessages() {\n  const gameStatus = game.getStatus();\n\n  document\n    .querySelector('.message-win')\n    .classList.toggle('hidden', gameStatus !== 'win');\n\n  document\n    .querySelector('.message-lose')\n    .classList.toggle('hidden', gameStatus !== 'lose');\n}\n\nfunction render() {\n  scoreEl.textContent = game.getScore();\n\n  const state = game.getState();\n\n  cells.forEach((cell, index) => {\n    const value = state[Math.floor(index / 4)][index % 4];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = 'field-cell';\n\n    if (value) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  startBtn.textContent = 'Restart';\n\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n}\n\nstartBtn.addEventListener('click', () => {\n  startBtn.classList.add('restart');\n\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  render();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const keyMap = {\n    ArrowLeft: 'moveLeft',\n    ArrowRight: 'moveRight',\n    ArrowUp: 'moveUp',\n    ArrowDown: 'moveDown',\n  };\n\n  const move = keyMap[e.key];\n\n  if (move) {\n    game[move]();\n    render();\n    updateMessages();\n  }\n});\n\ntouchButtons.forEach((btn) => {\n  btn.addEventListener('click', () => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    const move = btn.dataset.move;\n\n    if (move) {\n      game[move]();\n      render();\n      updateMessages();\n    }\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.state = this.initialState.map((row) => row.slice());\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    // progress check\n    const copy = this.state.map((row) => row.slice());\n\n    function compareStates(state1, state2) {\n      for (let i = 0; i < state1.length; i++) {\n        for (let j = 0; j < state1[i].length; j++) {\n          if (state1[i][j] !== state2[i][j]) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    for (const row of this.state) {\n      // Remove zeros from the row\n      const newRow = row.filter((tile) => tile !== 0);\n      // Combine tiles\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n      // Fill the rest of the row with zeros\n\n      while (newRow.length < this.state[0].length) {\n        newRow.push(0);\n      }\n      row.splice(0, this.state[0].length, ...newRow);\n    }\n\n    if (!compareStates(copy, this.state)) {\n      this.addRandomTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveRight() {\n    for (const row of this.state) {\n      row.reverse();\n    }\n\n    this.moveLeft();\n\n    for (const row of this.state) {\n      row.reverse();\n    }\n    this.checkGameStatus();\n  }\n\n  moveUp() {\n    const columns = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (!columns[j]) {\n          columns[j] = [];\n        }\n        columns[j][i] = this.state[i][j];\n      }\n    }\n\n    // progress check\n    const copy = columns.map((row) => row.slice());\n\n    function compareStates(state1, state2) {\n      for (let i = 0; i < state1.length; i++) {\n        for (let j = 0; j < state1[i].length; j++) {\n          if (state1[i][j] !== state2[i][j]) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    for (const row of columns) {\n      // Remove zeros from the row\n      const newRow = row.filter((tile) => tile !== 0);\n      // Combine tiles\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n      // Fill the rest of the row with zeros\n\n      while (newRow.length < this.state[0].length) {\n        newRow.push(0);\n      }\n      row.splice(0, this.state[0].length, ...newRow);\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        this.state[i][j] = columns[j][i];\n      }\n    }\n\n    if (!compareStates(copy, columns)) {\n      this.addRandomTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveDown() {\n    // Transpor e inverter colunas\n    for (let j = 0; j < this.state[0].length; j++) {\n      const col = [];\n\n      for (let i = 0; i < this.state.length; i++) {\n        col.push(this.state[i][j]);\n      }\n\n      col.reverse();\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[i][j] = col[i];\n      }\n    }\n\n    this.moveUp();\n\n    // Reverter colunas novamente\n    for (let j = 0; j < this.state[0].length; j++) {\n      const col = [];\n\n      for (let i = 0; i < this.state.length; i++) {\n        col.push(this.state[i][j]);\n      }\n      col.reverse();\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[i][j] = col[i];\n      }\n    }\n\n    this.checkGameStatus();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n\n  start() {\n    this.status = 'playing';\n    this.state = this.initialState.map((row) => row.slice());\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'playing';\n    this.score = 0;\n    this.state = this.initialState.map((row) => row.slice());\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Add your own methods here\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    emptyCells.sort(() => Math.random() - 0.5);\n\n    const [x, y] = emptyCells[0];\n\n    this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  checkGameStatus() {\n    const has2048 = this.state.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.status = 'win';\n\n      return;\n    }\n\n    const has0 = this.state.some((row) => row.includes(0));\n\n    if (has0) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this.state[i][j];\n        const right = this.state[i][j + 1];\n        const down = this.state[i + 1]?.[j];\n\n        if (current === right || current === down) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\n\nexport default Game;\n"],"names":["$a5fd07fa01589658$export$2e2bcd8739ae039","constructor","initialState","score","state","map","row","slice","status","moveLeft","copy","newRow","filter","tile","i","length","splice","push","compareStates","state1","state2","j","addRandomTile","checkGameStatus","moveRight","reverse","moveUp","columns","moveDown","col","getScore","getState","getStatus","start","restart","emptyCells","sort","Math","random","x","y","some","includes","current","right","down","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$scoreEl","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$touchButtons","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$updateMessages","gameStatus","classList","toggle","$09e991522ca7e64e$var$render","textContent","forEach","cell","index","value","floor","className","add","addEventListener","e","move","keyMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key","btn","dataset"],"version":3,"file":"index.1206d459.js.map"}