{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.state = this.initialState.map(function(row) {\n            return row.slice();\n        });\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                // progress check\n                var copy = this.state.map(function(row) {\n                    return row.slice();\n                });\n                function compareStates(state1, state2) {\n                    for(var i = 0; i < state1.length; i++)for(var j = 0; j < state1[i].length; j++){\n                        if (state1[i][j] !== state2[i][j]) return false;\n                    }\n                    return true;\n                }\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this = this, _loop = function() {\n                        var row = _step.value;\n                        var _row;\n                        // Remove zeros from the row\n                        var newRow = row.filter(function(tile) {\n                            return tile !== 0;\n                        });\n                        // Combine tiles\n                        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                            newRow[i] *= 2;\n                            _this.score += newRow[i];\n                            newRow.splice(i + 1, 1);\n                        }\n                        // Fill the rest of the row with zeros\n                        while(newRow.length < _this.state[0].length)newRow.push(0);\n                        (_row = row).splice.apply(_row, [\n                            0,\n                            _this.state[0].length\n                        ].concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow)));\n                    };\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                if (!compareStates(copy, this.state)) this.addRandomTile();\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.state[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        row.reverse();\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                this.moveLeft();\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    for(var _iterator1 = this.state[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                        var row1 = _step1.value;\n                        row1.reverse();\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                            _iterator1.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var columns = [];\n                for(var i = 0; i < this.state.length; i++)for(var j = 0; j < this.state[i].length; j++){\n                    if (!columns[j]) columns[j] = [];\n                    columns[j][i] = this.state[i][j];\n                }\n                // progress check\n                var copy = columns.map(function(row) {\n                    return row.slice();\n                });\n                function compareStates(state1, state2) {\n                    for(var i = 0; i < state1.length; i++)for(var j = 0; j < state1[i].length; j++){\n                        if (state1[i][j] !== state2[i][j]) return false;\n                    }\n                    return true;\n                }\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this = this, _loop = function() {\n                        var row = _step.value;\n                        var _row;\n                        // Remove zeros from the row\n                        var newRow = row.filter(function(tile) {\n                            return tile !== 0;\n                        });\n                        // Combine tiles\n                        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                            newRow[i] *= 2;\n                            _this.score += newRow[i];\n                            newRow.splice(i + 1, 1);\n                        }\n                        // Fill the rest of the row with zeros\n                        while(newRow.length < _this.state[0].length)newRow.push(0);\n                        (_row = row).splice.apply(_row, [\n                            0,\n                            _this.state[0].length\n                        ].concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow)));\n                    };\n                    for(var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                for(var i1 = 0; i1 < this.state.length; i1++)for(var j1 = 0; j1 < this.state[i1].length; j1++)this.state[i1][j1] = columns[j1][i1];\n                if (!compareStates(copy, columns)) this.addRandomTile();\n                this.checkGameStatus();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                // Transpor e inverter colunas\n                for(var j = 0; j < this.state[0].length; j++){\n                    var col = [];\n                    for(var i = 0; i < this.state.length; i++)col.push(this.state[i][j]);\n                    col.reverse();\n                    for(var i1 = 0; i1 < this.state.length; i1++)this.state[i1][j] = col[i1];\n                }\n                this.moveUp();\n                // Reverter colunas novamente\n                for(var j1 = 0; j1 < this.state[0].length; j1++){\n                    var col1 = [];\n                    for(var i2 = 0; i2 < this.state.length; i2++)col1.push(this.state[i2][j1]);\n                    col1.reverse();\n                    for(var i3 = 0; i3 < this.state.length; i3++)this.state[i3][j1] = col1[i3];\n                }\n                this.checkGameStatus();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.state = this.initialState.map(function(row) {\n                    return row.slice();\n                });\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"playing\";\n                this.score = 0;\n                this.state = this.initialState.map(function(row) {\n                    return row.slice();\n                });\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length === 0) return;\n                emptyCells.sort(function() {\n                    return Math.random() - 0.5;\n                });\n                var _emptyCells_ = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[0], 2), x = _emptyCells_[0], y = _emptyCells_[1];\n                this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                var has2048 = this.state.some(function(row) {\n                    return row.includes(2048);\n                });\n                if (has2048) {\n                    this.status = \"win\";\n                    return;\n                }\n                var has0 = this.state.some(function(row) {\n                    return row.includes(0);\n                });\n                if (has0) return;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var _this_state_;\n                    var current = this.state[i][j];\n                    var right = this.state[i][j + 1];\n                    var down = (_this_state_ = this.state[i + 1]) === null || _this_state_ === void 0 ? void 0 : _this_state_[j];\n                    if (current === right || current === down) return;\n                }\n                this.status = \"lose\";\n            }\n        }\n    ]);\n    return Game;\n}();\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$startBtn = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$scoreEl = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$cells = document.querySelectorAll(\".field-cell\");\nvar $197cd56b15c33885$var$touchButtons = document.querySelectorAll(\".btn-move\");\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)();\nfunction $197cd56b15c33885$var$updateMessages() {\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    document.querySelector(\".message-win\").classList.toggle(\"hidden\", gameStatus !== \"win\");\n    document.querySelector(\".message-lose\").classList.toggle(\"hidden\", gameStatus !== \"lose\");\n}\nfunction $197cd56b15c33885$var$render() {\n    $197cd56b15c33885$var$scoreEl.textContent = $197cd56b15c33885$var$game.getScore();\n    var state = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$cells.forEach(function(cell, index) {\n        var value = state[Math.floor(index / 4)][index % 4];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell\";\n        if (value) cell.classList.add(\"field-cell--\".concat(value));\n    });\n    $197cd56b15c33885$var$startBtn.textContent = \"Restart\";\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n}\n$197cd56b15c33885$var$startBtn.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$startBtn.classList.add(\"restart\");\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") $197cd56b15c33885$var$game.start();\n    else $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$render();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    var keyMap = {\n        ArrowLeft: \"moveLeft\",\n        ArrowRight: \"moveRight\",\n        ArrowUp: \"moveUp\",\n        ArrowDown: \"moveDown\"\n    };\n    var move = keyMap[e.key];\n    if (move) {\n        $197cd56b15c33885$var$game[move]();\n        $197cd56b15c33885$var$render();\n        $197cd56b15c33885$var$updateMessages();\n    }\n});\n$197cd56b15c33885$var$touchButtons.forEach(function(btn) {\n    btn.addEventListener(\"click\", function() {\n        if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n        var move = btn.dataset.move;\n        if (move) {\n            $197cd56b15c33885$var$game[move]();\n            $197cd56b15c33885$var$render();\n            $197cd56b15c33885$var$updateMessages();\n        }\n    });\n});\n\n})();\n//# sourceMappingURL=index.12172a0c.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst startBtn = document.querySelector('.button.start');\nconst scoreEl = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst touchButtons = document.querySelectorAll('.btn-move');\n\nconst game = new Game();\n\nfunction updateMessages() {\n  const gameStatus = game.getStatus();\n\n  document\n    .querySelector('.message-win')\n    .classList.toggle('hidden', gameStatus !== 'win');\n\n  document\n    .querySelector('.message-lose')\n    .classList.toggle('hidden', gameStatus !== 'lose');\n}\n\nfunction render() {\n  scoreEl.textContent = game.getScore();\n\n  const state = game.getState();\n\n  cells.forEach((cell, index) => {\n    const value = state[Math.floor(index / 4)][index % 4];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = 'field-cell';\n\n    if (value) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  startBtn.textContent = 'Restart';\n\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n}\n\nstartBtn.addEventListener('click', () => {\n  startBtn.classList.add('restart');\n\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  render();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const keyMap = {\n    ArrowLeft: 'moveLeft',\n    ArrowRight: 'moveRight',\n    ArrowUp: 'moveUp',\n    ArrowDown: 'moveDown',\n  };\n\n  const move = keyMap[e.key];\n\n  if (move) {\n    game[move]();\n    render();\n    updateMessages();\n  }\n});\n\ntouchButtons.forEach((btn) => {\n  btn.addEventListener('click', () => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    const move = btn.dataset.move;\n\n    if (move) {\n      game[move]();\n      render();\n      updateMessages();\n    }\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.state = this.initialState.map((row) => row.slice());\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    // progress check\n    const copy = this.state.map((row) => row.slice());\n\n    function compareStates(state1, state2) {\n      for (let i = 0; i < state1.length; i++) {\n        for (let j = 0; j < state1[i].length; j++) {\n          if (state1[i][j] !== state2[i][j]) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    for (const row of this.state) {\n      // Remove zeros from the row\n      const newRow = row.filter((tile) => tile !== 0);\n      // Combine tiles\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n      // Fill the rest of the row with zeros\n\n      while (newRow.length < this.state[0].length) {\n        newRow.push(0);\n      }\n      row.splice(0, this.state[0].length, ...newRow);\n    }\n\n    if (!compareStates(copy, this.state)) {\n      this.addRandomTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveRight() {\n    for (const row of this.state) {\n      row.reverse();\n    }\n\n    this.moveLeft();\n\n    for (const row of this.state) {\n      row.reverse();\n    }\n    this.checkGameStatus();\n  }\n\n  moveUp() {\n    const columns = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (!columns[j]) {\n          columns[j] = [];\n        }\n        columns[j][i] = this.state[i][j];\n      }\n    }\n\n    // progress check\n    const copy = columns.map((row) => row.slice());\n\n    function compareStates(state1, state2) {\n      for (let i = 0; i < state1.length; i++) {\n        for (let j = 0; j < state1[i].length; j++) {\n          if (state1[i][j] !== state2[i][j]) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    for (const row of columns) {\n      // Remove zeros from the row\n      const newRow = row.filter((tile) => tile !== 0);\n      // Combine tiles\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n      // Fill the rest of the row with zeros\n\n      while (newRow.length < this.state[0].length) {\n        newRow.push(0);\n      }\n      row.splice(0, this.state[0].length, ...newRow);\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        this.state[i][j] = columns[j][i];\n      }\n    }\n\n    if (!compareStates(copy, columns)) {\n      this.addRandomTile();\n    }\n    this.checkGameStatus();\n  }\n\n  moveDown() {\n    // Transpor e inverter colunas\n    for (let j = 0; j < this.state[0].length; j++) {\n      const col = [];\n\n      for (let i = 0; i < this.state.length; i++) {\n        col.push(this.state[i][j]);\n      }\n\n      col.reverse();\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[i][j] = col[i];\n      }\n    }\n\n    this.moveUp();\n\n    // Reverter colunas novamente\n    for (let j = 0; j < this.state[0].length; j++) {\n      const col = [];\n\n      for (let i = 0; i < this.state.length; i++) {\n        col.push(this.state[i][j]);\n      }\n      col.reverse();\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[i][j] = col[i];\n      }\n    }\n\n    this.checkGameStatus();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n\n  start() {\n    this.status = 'playing';\n    this.state = this.initialState.map((row) => row.slice());\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'playing';\n    this.score = 0;\n    this.state = this.initialState.map((row) => row.slice());\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Add your own methods here\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    emptyCells.sort(() => Math.random() - 0.5);\n\n    const [x, y] = emptyCells[0];\n\n    this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  checkGameStatus() {\n    const has2048 = this.state.some((row) => row.includes(2048));\n\n    if (has2048) {\n      this.status = 'win';\n\n      return;\n    }\n\n    const has0 = this.state.some((row) => row.includes(0));\n\n    if (has0) {\n      return;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this.state[i][j];\n        const right = this.state[i][j + 1];\n        const down = this.state[i + 1]?.[j];\n\n        if (current === right || current === down) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\n\nexport default Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","TypeError","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","instance","Constructor","score","state","map","row","status","key","value","copy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_this","_iterator","next","done","_loop","newRow","filter","tile","splice","push","apply","concat","err","return","compareStates","state1","state2","j","addRandomTile","checkGameStatus","reverse","moveLeft","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row1","columns","i1","j1","col","moveUp","col1","i2","i3","emptyCells","sort","Math","random","_emptyCells_","_s","_e","_i","_arr","_n","_d","x","y","some","includes","_this_state_","current","right","down","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$startBtn","document","querySelector","$197cd56b15c33885$var$scoreEl","$197cd56b15c33885$var$cells","querySelectorAll","$197cd56b15c33885$var$touchButtons","$197cd56b15c33885$var$game","$197cd56b15c33885$var$updateMessages","gameStatus","getStatus","classList","toggle","$197cd56b15c33885$var$render","textContent","getScore","getState","forEach","cell","index","floor","className","add","addEventListener","start","restart","e","move","keyMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","btn","dataset"],"version":3,"file":"index.12172a0c.js.map"}